defmodule Markov.Log do
  @v4_log_entry_mapping %{1 => :start, 2 => :end, 3 => :train, 4 => :gen}

  defmodule Operation do
    defstruct [:date_time, :type, :arg]
    @type t() :: %__MODULE__{
      date_time: DateTime.t,
      type: Markov.log_entry_type,
      arg: term()
    }
  end

  alias Markov.Log.Operation

  @doc """
  Reads the log file generated by Markov v4.x

      iex> Markov.Log.read_v4("/path/to/old_model/history.log")
      {:ok,
       [
         %Markov.Operation{date_time: ~U[2022-10-02 16:59:51.844Z], type: :start, arg: nil},
         %Markov.Operation{date_time: ~U[2022-10-02 16:59:56.705Z], type: :train, arg: ["hello", "world"]}
       ]}
  """
  @spec read_v4(path :: String.t) :: [Operation.t]
  def read_v4(path) do
    {:ok, file} = :file.open(path, [:read, :raw, :binary])
    do_read_log(file) |> :lists.reverse
  end

  defp do_read_log(file, acc \\ []) do
    case :file.read(file, 11) do
      {:ok, <<type::8, ts::64, len::16>>} ->
        {:ok, data} = :file.read(file, len)
        type = Map.get(@v4_log_entry_mapping, type)
        date_time = DateTime.from_unix!(ts, :millisecond)
        data = :erlang.binary_to_term(data)
        acc = [%Operation{date_time: date_time, type: type, arg: data} | acc]
        do_read_log(file, acc)
      _ -> acc
    end
  end

  @doc """
  Fills the model with training data found in the `history.log` of a markov 4.x
  model
  """
  @spec migrate_from_v4(old_history_log :: String.t, model :: Markov.model_reference) :: :ok
  def migrate_from_v4(old_history_log, model) do
    _ = read_v4(old_history_log)
      |> Enum.map(fn
          %Operation{type: :train, arg: tokens} ->
            Markov.train(model, tokens)
          _ -> :ok
        end)
    :ok
  end
end
